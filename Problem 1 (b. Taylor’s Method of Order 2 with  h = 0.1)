# Taylor's method of order 2
def taylor_method_order2(f, t0, y0, h, n):
    t = np.zeros(n+1)
    y = np.zeros(n+1)
    t[0] = t0
    y[0] = y0
    for i in range(n):
        dfdt = (-y[i]/t[i]**2 - 2*y[i]**2/t[i]**3) + (1/t[i] + 2*y[i]/t[i]**2)*f(t[i], y[i])
        y[i+1] = y[i] + h * f(t[i], y[i]) + (h**2)/2 * dfdt
        t[i+1] = t[i] + h
    return t, y

# Compute Taylor approximation
t_taylor, y_taylor = taylor_method_order2(f, t0, y0, h, n)

# Plot results
plt.figure(figsize=(10, 6))
plt.plot(t_exact, y_exact, label='Exact Solution', color='blue')
plt.plot(t_taylor, y_taylor, 'o--', label='Taylor Approximation (Order 2)', color='green')
plt.xlabel('t')
plt.ylabel('y(t)')
plt.title('Taylor Method (Order 2) vs Exact Solution (h=0.1)')
plt.legend()
plt.grid()
plt.show()

# Print results
print("Taylor Method (Order 2) Results (h=0.1):")
for i in range(len(t_taylor)):
    print(f"t = {t_taylor[i]:.1f}, y_taylor = {y_taylor[i]:.6f}, y_exact = {exact_solution(t_taylor[i]):.6f}, Error = {abs(y_taylor[i] - exact_solution(t_taylor[i])):.6f}")
